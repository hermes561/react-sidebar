{"version":3,"sources":["ClickOutside.js","HermeSidebar.js","serviceWorker.js","index.js"],"names":["ClickOutside","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handle","e","type","isTouch","onClickOutside","el","container","contains","target","getContainer","bind","assertThisInitialized","ref","_this$props","children","objectWithoutProperties","react_default","a","createElement","assign","document","addEventListener","removeEventListener","Component","HermeSidebar","state","expanded","setState","sidebarOpen","_this2","sidebarItems","sidebarSelected","navItems","map","itemBar","lib","eventKey","id","key","indexOf","icon","className","style","fontSize","text","href","link","items","length","itemSub","summary","ClickOutside_ClickOutside","lib_default","onToggle","Toggle","Nav","defaultSelected","Boolean","window","location","hostname","match","ReactDOM","render","src_HermeSidebar","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35193c1e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ClickOutside extends Component {\n  static propTypes = {\n    onClickOutside: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.getContainer = this.getContainer.bind(this)\n    this.isTouch = false\n  }\n\n  getContainer(ref) {\n    this.container = ref\n  }\n\n  render() {\n    const { children, onClickOutside, ...props } = this.props\n    return <div {...props} ref={this.getContainer}>{children}</div>\n  }\n\n  componentDidMount() {\n    document.addEventListener('touchend', this.handle, true)\n    document.addEventListener('click', this.handle, true)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('touchend', this.handle, true)\n    document.removeEventListener('click', this.handle, true)\n  }\n\n  handle = e => {\n    if (e.type === 'touchend') this.isTouch = true\n    if (e.type === 'click' && this.isTouch) return\n    const { onClickOutside } = this.props\n    const el = this.container\n    if (el && !el.contains(e.target)) onClickOutside(e)\n  }\n}\n\n","import React, { Component } from 'react';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport ClickOutside from './ClickOutside';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\n\nclass HermeSidebar extends Component {\n  state = {\n      expanded: false\n  }  \n  \n  componentDidMount() {\n      this.setState({\n          expanded: this.props.sidebarOpen\n      });\n  }\n  \n  render() {\n    const {sidebarItems, sidebarSelected} = this.props;  \n    \n    const navItems = sidebarItems ? sidebarItems.map(itemBar => {\n        return (\n            <NavItem eventKey={itemBar.id} key={itemBar.id} expanded={sidebarSelected.indexOf(itemBar.id+'/') !==-1} >\n                { itemBar.icon ? (\n                    <NavIcon>\n                        <i className={itemBar.icon} style={{ fontSize: '1.75em' }} />\n                    </NavIcon>\n                  ) : (null)\n                } \n                {  itemBar.text ? (\n                    <NavText>\n                        { itemBar.type === 'link' ? (\n                                <a href={itemBar.link} ><b>{itemBar.text}</b></a>\n                            ) : (<b>{itemBar.text}</b>)\n                        }\n                    </NavText> \n                  ) : (null)\n                }   \n                { itemBar.items ? (\n                        itemBar.items.length ? (\n                            itemBar.items.map((itemSub) => {\n                                return (\n                                    <NavItem eventKey={itemBar.id+'/'+itemSub.id} key={itemSub.id}>\n                                        <NavText>\n                                        {   itemSub.type === 'link' ? (\n                                                <a href={itemSub.link} target={itemSub.target ? itemSub.target:''}><b>{itemSub.text}</b>\n                                                   <br /><small> { itemSub.summary ? ('( '+itemSub.summary+' )') : (null)}</small>\n                                                </a>\n                                            ) : (<b>{itemSub.text}</b>)\n                                        }\n                                        \n                                       \n                                        </NavText>        \n                                    </NavItem>\n                                )    \n                            })\n                            \n                       ) : (null) \n                    ) : (null)\n                }    \n            </NavItem>\n        )   \n    }): (\n        <NavItem eventKey=\"no_data\"></NavItem>\n    )\n   \n    return (\n      <div className=\"App\">\n        <ClickOutside\n            onClickOutside={() => {\n                this.setState({ expanded: false });\n            }}\n        >\n            <SideNav\n                className =\"globalSidebar\"\n                expanded={this.state.expanded}\n                onToggle={(expanded) => {\n                    this.setState({ expanded });\n                }}\n            >\n                <SideNav.Toggle />\n                <SideNav.Nav defaultSelected={sidebarSelected}>\n                    {navItems}\n                </SideNav.Nav>\n            </SideNav>\n        </ClickOutside>\n      </div>\n    );\n  }\n}\n\nexport default HermeSidebar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HermeSidebar from './HermeSidebar';\nimport * as serviceWorker from './serviceWorker';\n\nconst sidebarOpen = window.sidebarOpen;\nconst sidebarSelected = window.sidebarSelected;\nconst sidebarItems = window.sidebarItems;\n\nReactDOM.render(<HermeSidebar sidebarOpen={sidebarOpen} sidebarSelected={sidebarSelected} sidebarItems={sidebarItems} />, document.getElementById('sidebarReact'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}